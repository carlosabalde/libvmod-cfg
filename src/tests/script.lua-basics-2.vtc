 varnishtest "Test basics for Lua script 2"

server s1 {
   rxreq
   txresp
} -repeat 2 -start

shell {
    cat > "${tmp}/test.lua" <<'EOF'
EOF
}

varnish v1 -arg "-p vsl_reclen=1024" -vcl+backend {
    import ${vmod_cfg};

    sub vcl_init {
        new script = cfg.script(
            "file://${tmp}/test.lua",
            period=0,
            type=lua);
    }

    sub vcl_deliver {
        if (req.http.id == "1") {
            script.init({"
                varnish.engine.foo = 42
                varnish.shared.set('bar', 314, 'global')
                varnish.shared.incr('bar', 10, 'global')
                varnish.shared.eval(function()
                    local value = varnish.shared.incr('bar', -4, 'global')
                    varnish.shared.set('baz', value, 'global')
                end)
                varnish.shared.set('qux', 100, 'task')
                varnish.shared.set('qux', 27182, 'global')
            "});
            script.execute();
            script.free_result();

            script.init({"
                varnish.shared.eval(function()
                    varnish.shared.eval(function()
                        varnish.shared.eval(function()
                            varnish.shared.incr('baz', -6, 'global');
                            error('error')
                        end)
                    end)
                end)

                return 42
            "});
            script.execute();
            set resp.http.result2-is-error = script.result_is_error();
            script.free_result();

            script.init({"
                varnish.shared.unset('qux', 'global')
                return {
                    varnish.engine.foo,
                    varnish.shared.get('bar', 'global'),
                    varnish.shared.get('baz', 'global'),
                    varnish.shared.get('qux', 'global') == nil,
                    varnish.shared.get('qux', 'all'),
                }
            "});
            script.execute();
            set resp.http.result3-table-value-0 = script.get_table_result_value(0);
            set resp.http.result3-table-value-1 = script.get_table_result_value(1);
            set resp.http.result3-table-value-2 = script.get_table_result_value(2);
            set resp.http.result3-table-value-3 = script.get_table_result_value(3);
            set resp.http.result3-table-value-4 = script.get_table_result_value(4);
            script.free_result();

        } elsif (req.http.id == "2") {
            script.init({"
                varnish.shared.unset('baz', 'all')
                return {
                    varnish.shared.get('bar', 'all'),
                    varnish.shared.get('qux', 'all') == nil,
                }
            "});
            script.execute();
            set resp.http.result1-table-value-0 = script.get_table_result_value(0);
            set resp.http.result1-table-value-1 = script.get_table_result_value(1);
            script.free_result();
        }

        set resp.http.stats = script.stats();
        set resp.http.variables-current = script.counter("variables.current");
    }
} -start

client c1 {
    txreq -hdr "id: 1"
    rxresp

    expect resp.http.result2-is-error == "true"

    expect resp.http.result3-table-value-0 == "42"
    expect resp.http.result3-table-value-1 == "320"
    expect resp.http.result3-table-value-2 == "314"
    expect resp.http.result3-table-value-3 == "true"
    expect resp.http.result3-table-value-4 == "100"

    expect resp.http.variables-current == "2"

    txreq -hdr "id: 2"
    rxresp

    expect resp.http.result1-table-value-0 == "320"
    expect resp.http.result1-table-value-1 == "true"

    expect resp.http.variables-current == "1"
} -run

varnish v1 -expect client_req == 2

varnish v1 -expect MGT.child_panic == 0
